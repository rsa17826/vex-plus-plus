
@name same line return
@file \.gd$
@regex :\s*(return|continue|break|pass)(\s*(true|false|null|\d+)?)$
@replace : $1$2
@flags gm
@endregex

@name make it so that when i tab in a function it is replaced with the correct one
@file \.gd$
@regex \bTrue\b
@replace true
@flags gm
@endregex

@file \.gd$
@regex \bFalse\b
@replace false
@flags gm
@endregex

@file \.gd$
@regex Vector2\(0, 0\)
@replace Vector2.ZERO
@flags gm
@endregex

@file ###\.gd$
@regex (?<=\s)get_node\("([\w/]+)"\)
@replace $$$1
@flags gm
@endregex

@name fix bad self spacings
@file \.gd$
@regex self ([,)])
@replace self$1
@flags gm
@endregex

@file \.gd$
@regex func func 
@replace func 
@flags gm
@endregex

@file scenes/blocks/([^/]+)/\1\.gd(?<!textureRect\.gd)$
@regex ^func ((?:_physics)?_process|_ready)
@replace func on$1
@flags gm
@endregex

@file scenes/blocks/([^/]+)/\1\.gd$
@regex ^func _(on_body_entered|on_body_exited)
@replace func $1
@flags gm
@endregex

@file scenes/blocks/([^/]+)/\1\.gd$
@regex func on_body_(entered|exited)\(body: Node2D, real=true\) -> void:
@replace func on_body_$1(body: Node2D) -> void:
@flags gm
@endregex

@file \.gd$
@regex body == global.player
@replace body is Player
@flags gm
@endregex

@name replace ['a'] with .a
@file \.gd$
@regex (?<=[\w_\]])\[(['"])([\w_]+)\1\]
@replace .$2
@flags gm
@endregex

@name replace print with log.pp
@file \.gd$
@regex (?<=  |^)print\(
@replace log.pp(
@flags gm
@endregex

@name extra end spaces
@file \.gd$
@regex  +$
@replace 
@flags gm
@endregex

@name instance to instantiate
@file \.gd$
@regex  .instance\(\)
@replace  .instantiate()
@flags gm
@endregex

